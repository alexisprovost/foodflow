name: CI/CD Pipeline

on:
  push:
    branches:
      - prod
    paths:
      - dev/**

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write

      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Log in to the Container registry
          uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

        - name: Build and push API Docker image
          uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
          with:
            context: ./dev/api
            push: true
            tags: ghcr.io/${{ github.repository }}/api:latest
            labels: ${{ steps.meta.outputs.labels }}

        - name: Build and push Vite.js Docker image
          uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
          with:
            context: ./dev/vite-app
            push: true
            tags: ghcr.io/${{ github.repository }}/vite-app:latest
            labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Install bzip2 on remote machine
        env:
            HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
            USER: ${{ secrets.DEPLOY_SERVER_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST "sudo apt-get update && sudo apt-get install -y bzip2"

      - name: Install Docker and Docker Compose on remote machine
        env:
            HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
            USER: ${{ secrets.DEPLOY_SERVER_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST "sudo apt-get update && sudo apt-get install -y docker.io && sudo curl -L 'https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose"

      - name: Login to GitHub Container Registry on remote machine
        env:
          HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
          USER: ${{ secrets.DEPLOY_SERVER_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST "echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin"

      - name: Docker-Compose Remote Deployment
        uses: alexisprovost/docker-compose-remote-action@master
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          ACCESS_TOKEN_EXPIRES: ${{ secrets.ACCESS_TOKEN_EXPIRES }}
          REFRESH_TOKEN_EXPIRES: ${{ secrets.REFRESH_TOKEN_EXPIRES }}
        with:
          ssh_user: ${{ secrets.DEPLOY_SERVER_USER }}
          ssh_host: ${{ secrets.DEPLOY_SERVER_HOST }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh_host_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          docker_compose_prefix: ${{ github.repository }}
          docker_compose_filename: "dev/docker-compose.yml"
          docker_env: |
            #!/bin/bash
            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export REFRESH_TOKEN_SECRET="${{ secrets.REFRESH_TOKEN_SECRET }}"
            export ACCESS_TOKEN_EXPIRES="${{ secrets.ACCESS_TOKEN_EXPIRES }}"
            export REFRESH_TOKEN_EXPIRES="${{ secrets.REFRESH_TOKEN_EXPIRES }}"
          
