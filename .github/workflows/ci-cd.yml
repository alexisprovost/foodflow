name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./api
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/$(echo "${{ github.repository }}" | awk '{print tolower($0)}')/api:latest

      - name: Build and push Vite.js Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./vite-app
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/$(echo "${{ github.repository }}" | awk '{print tolower($0)}')/vite-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Deploy to target server
        env:
          HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
          USER: ${{ secrets.DEPLOY_SERVER_USER }}
          TARGET_DIR: your_target_directory_on_the_server
        run: |
          git config --global core.sshCommand "ssh -i ${{ env.SSH_PRIVATE_KEY }} -o StrictHostKeyChecking=no -F /dev/null"
          git remote add deploy ssh://$USER@$HOST/$TARGET_DIR
          git push deploy HEAD:refs/heads/main --force
          ssh -i ${{ env.SSH_PRIVATE_KEY }} -o StrictHostKeyChecking=no $USER@$HOST "cd $TARGET_DIR && echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} > .env && echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env && echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env && docker-compose pull && docker-compose up --build -d"
